"""
Django settings for WowDash project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY: claves/flags desde variables de entorno en producción
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-y9+u@w))$2g_mqgif#vknt$reo$o!p#h3!r4gyq!=i4s!#cxiw')
DEBUG = os.getenv('DJANGO_DEBUG', 'True').lower() in ('1', 'true', 'yes', 'y')
ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',') if not DEBUG else ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core.apps.CoreConfig',  # Aplicación principal del sistema Optimizador
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise para servir estáticos en producción
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'WowDash.middleware.RequireLoginMiddleware',
    'WowDash.middleware.NoCacheMiddleware',
]

ROOT_URLCONF = 'WowDash.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # Registrar librerías de template personalizadas
            'libraries': {
                'ui_extras': 'core.templatetags.ui_extras',
            },
        },
    },
]

WSGI_APPLICATION = 'WowDash.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASE_URL = os.getenv('DATABASE_URL')
if DATABASE_URL:
    # Espera formato postgres://USER:PASSWORD@HOST:PORT/NAME
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': urlparse(DATABASE_URL).path.lstrip('/'),
            'USER': urlparse(DATABASE_URL).username,
            'PASSWORD': urlparse(DATABASE_URL).password,
            'HOST': urlparse(DATABASE_URL).hostname,
            'PORT': str(urlparse(DATABASE_URL).port or ''),
        }
    }
else:
    # Desarrollo local por defecto: SQLite (usa el db.sqlite3 existente)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'Europe/Madrid'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Idiomas disponibles
LANGUAGES = [
    ('es', 'Español'),
    ('en', 'English'),
]

# Directorio de traducciones
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Si se define una URL externa (Render), usa esa para servir estáticos
RENDER_EXTERNAL_URL = os.getenv('RENDER_EXTERNAL_URL')
if RENDER_EXTERNAL_URL and not DEBUG:
    STATIC_URL = RENDER_EXTERNAL_URL.rstrip('/') + '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

# WhiteNoise: permitir archivos estáticos comprimidos
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Authentication settings
LOGIN_URL = '/authentication/signin/'
LOGIN_REDIRECT_URL = '/proyectos/'
LOGOUT_REDIRECT_URL = '/authentication/signin/'

# Session settings: cerrar sesión al cerrar navegador y expirar por inactividad
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# 30 minutos (en segundos)
SESSION_COOKIE_AGE = 30 * 60
# Renueva el vencimiento con cada request (actividad)
SESSION_SAVE_EVERY_REQUEST = True

# Media files (user-generated content)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'